From 5936ad206b2dfda2276d20e54f259684c967ab27 Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Sat, 19 Jan 2019 00:44:29 +0100
Subject: [PATCH] [GLES] memcpy intead multi glTexSubImage2D for planes with
 pitch

---
 .../VideoRenderers/LinuxRendererGLES.cpp      | 28 ++++++++++++++-----
 .../VideoRenderers/LinuxRendererGLES.h        |  1 +
 2 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
index ed15f8976e04..181b12e3a0eb 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
@@ -46,6 +46,7 @@ CLinuxRendererGLES::~CLinuxRendererGLES()
   UnInit();
 
   ReleaseShaders();
+  free(m_planeBuffer), m_planeBuffer = nullptr;
 }
 
 CBaseRenderer* CLinuxRendererGLES::Create(CVideoBuffer *buffer)
@@ -260,18 +261,29 @@ void CLinuxRendererGLES::LoadPlane(CYuvPlane& plane, int type,
   glBindTexture(m_textureTarget, plane.id);
 
   // OpenGL ES does not support strided texture input.
+  GLint pixelStore = -1;
   if (stride != static_cast<int>(width * bps))
   {
-    unsigned char* src = static_cast<unsigned char*>(data);
-    for (unsigned int y = 0; y < height; ++y, src += stride)
+    unsigned int verMajor, verMinor;
+    m_renderSystem->GetRenderVersion(verMajor, verMinor);
+
+    if (verMajor < 3)
     {
-      glTexSubImage2D(m_textureTarget, 0, 0, y, width, 1, type, GL_UNSIGNED_BYTE, src);
+      unsigned char* src (static_cast<unsigned char*>(data)), *dst(m_planeBuffer);
+      for (unsigned int y = 0; y < height; ++y, src += stride, dst += width)
+        memcpy(dst, src, width);
+      pixelData = m_planeBuffer;
+    }
+    else
+    {
+      glGetIntegerv(GL_UNPACK_ROW_LENGTH, &pixelStore);
+      glPixelStorei(GL_UNPACK_ROW_LENGTH, stride);
     }
   }
-  else
-  {
-    glTexSubImage2D(m_textureTarget, 0, 0, 0, width, height, type, GL_UNSIGNED_BYTE, pixelData);
-  }
+  glTexSubImage2D(m_textureTarget, 0, 0, 0, width, height, type, GL_UNSIGNED_BYTE, pixelData);
+
+  if (pixelStore >= 0)
+    glPixelStorei(GL_UNPACK_ROW_LENGTH, pixelStore);
 
   // check if we need to load any border pixels
   if (height < plane.texheight)
@@ -1262,6 +1274,8 @@ bool CLinuxRendererGLES::CreateYV12Texture(int index)
   im.planesize[1] = im.stride[1] * (im.height >> im.cshift_y);
   im.planesize[2] = im.stride[2] * (im.height >> im.cshift_y);
 
+  m_planeBuffer = static_cast<unsigned char*>(realloc(m_planeBuffer, m_sourceHeight * m_sourceWidth));
+
   for (int i = 0; i < 3; i++)
   {
     im.plane[i] = new uint8_t[im.planesize[i]];
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
index 56c401aca144..f0a310ff931d 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
@@ -201,6 +201,7 @@ class CLinuxRendererGLES : public CBaseRenderer
   bool m_fullRange;
   AVColorPrimaries m_srcPrimaries;
   bool m_toneMap = false;
+  unsigned char* m_planeBuffer = nullptr;
 
   // clear colour for "black" bars
   float m_clearColour{0.0f};
